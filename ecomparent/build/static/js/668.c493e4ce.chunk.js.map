{"version":3,"file":"static/js/668.c493e4ce.chunk.js","mappings":"sKAoDA,QAlDA,SAAuBA,EAAKC,GACxB,MAAMC,EAAMC,IAASC,EAAAA,EAAAA,aACfC,EAAOC,IAAUF,EAAAA,EAAAA,UAAS,OAC1BG,EAASC,IAAYJ,EAAAA,EAAAA,WAAS,GAE9BK,EAAOC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,eAAgB,KA0CpE,OAvCDC,EAAAA,EAAAA,YAAU,KACL,IAAIC,GAAY,EAEhBC,MAAMjB,EACN,CAACC,OAAOA,EACRiB,QAAQ,CACR,eAAe,mBACf,cAAiB,kBAAWT,QAAX,IAAWA,OAAX,EAAWA,EAAOU,WAElCC,MAAMC,IACH,IAAIA,EAASC,GAAG,CAEZ,GADAd,GAAW,GACU,MAAlBa,EAASE,OAGR,MAAMC,MAAM,qCAFZR,GAAY,CAInB,CAKD,OAJsB,MAAlBK,EAASE,QACTf,GAAW,GAGRa,EAASI,MAAhB,IAEHL,MAAMlB,IAEAc,EACCV,EAASJ,EAAKwB,KAEdvB,EAAQD,EACX,IAEJyB,OAAMC,IACHpB,GAAW,GACXF,EAASsB,EAAIC,QAAb,GA/BJ,GAiCD,CAAC5B,EAAD,OAASQ,QAAT,IAASA,OAAT,EAASA,EAAOU,OAAQnB,IAGpB,CAACO,UAASF,QAAOH,OAC3B,E,gCCvCD,SAAS4B,IAQL,MAAM,KAACC,IAAOC,EAAAA,EAAAA,YAAWC,EAAAA,GACzB,IAAIC,EACDH,IACDG,GAAYC,EAAAA,EAAAA,GAAWJ,EAAKZ,SAG9B,IAAInB,EAAI,GAAD,OAAKoC,wBAAL,+BAAsDF,EAAWG,UAExE,MAAM,KAACnC,EAAD,QAAOK,EAAP,MAAgBF,GAAQiC,EAActC,EAD/B,OAKPuC,EAAU,CACZ,CAAEC,MAAO,KAAMC,WAAY,KAAMC,KAAM,QACvC,CACEF,MAAO,WACPC,WAAY,WACZC,KAAM,OACNC,KAAM,EACNC,YAAa,QAEf,CACEJ,MAAO,QACPC,WAAY,QACZI,YAAY,EACZC,WAAaC,IAEJ,SAACC,EAAA,EAAD,CAAQC,IAAKF,EAAOG,IAAIC,SAGnC,CAAEX,MAAO,UAAWC,WAAY,UAAWE,KAAM,GACjD,CAAEH,MAAO,cAAeC,WAAY,cAAeE,KAAM,EAAGD,KAAM,QAClE,CACEF,MAAO,QACPC,WAAY,QACZW,KAAM,SACNR,YAAa,OACbS,MAAO,QAET,CACEb,MAAO,OACPC,WAAY,OACZW,KAAM,SACNR,YAAa,OACbS,MAAO,OACPX,KAAM,SAMd,OAFI3B,EAAAA,EAAAA,YAAU,KAAKuC,SAASC,MAAM,QAAf,GACf,KAEF,8BACIhD,GAkBQ,SAACiD,EAAA,EAAD,KAjBV,gCACCnD,IAAS,eAAIoD,MAAO,CAACC,QAAS,OAAQC,eAAgB,SAAUC,WAAY,SAAUC,QAAQ,SAAUC,MAAO,QAAtG,SACPzD,IAEJH,IAAO,iBAAKuD,MAAO,CAAEM,OAAQ,OAAQC,MAAO,QAArC,eAEJ,SAACC,EAAA,EAAD,CAAKC,EAAE,aAAaH,OAAO,OAA3B,UACE,SAACI,EAAA,EAAD,CACEC,KAAMlE,EACNqC,QAASA,EACT8B,SAAU,EACVC,mBAAoB,CAAC,GACrBC,mBAAiB,EACjBC,yBAAyB,MATzB,WAgBX,CAED,SAAeC,EAAAA,EAAAA,MAAK3C,E","sources":["usequery/useFetchToken.js","components/profiles/YourOrders.js"],"sourcesContent":["import {useEffect, useState} from 'react'\r\n\r\nfunction useFetchToken(url, method) {\r\n    const[data, setData]=useState()\r\n    const[error, setError]=useState(null)\r\n    const[loading, setLoading]=useState(true)\r\n\r\n    const token= JSON.parse(window.localStorage.getItem(\"authToken\"))|| null\r\n    \r\n    // let response= await fetch(`${process.env.REACT_APP_URLS}/product/editproduct/${id}`,\r\n   useEffect(()=>{\r\n        let errorStatus=false\r\n\r\n        fetch(url,\r\n        {method:method,\r\n        headers:{\r\n        'Content-Type':'application/json',\r\n        'Authorization': 'Bearer '+ token?.access\r\n        }})\r\n        .then((response)=>{\r\n            if(!response.ok){\r\n                setLoading(false)\r\n                if(response.status===417){\r\n                    errorStatus=true\r\n                }else{\r\n                    throw Error(\"Couldn't fetch data, please retry\")\r\n                }\r\n            }\r\n            if (response.status===200){\r\n                setLoading(false)\r\n            }       \r\n            ;     \r\n            return response.json()\r\n        })\r\n        .then((data)=>{\r\n            ;     \r\n            if(errorStatus){\r\n                setError(data.msg)\r\n            }else{\r\n                setData(data)\r\n            }\r\n        })\r\n        .catch(err=>{\r\n            setLoading(false)\r\n            setError(err.message)\r\n        })  \r\n    }, [method, token?.access, url] ) \r\n    \r\n    ;\r\n    return {loading, error, data} \r\n}\r\n\r\nexport default useFetchToken\r\n\r\n\r\n// let response= await fetch(`${process.env.REACT_APP_URLS}/product/editproduct/${id}`,\r\n \r\n\r\n\r\n\r\n","import React, { memo, useEffect,useContext } from 'react'\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport { Avatar, Box} from \"@mui/material\";\r\nimport Loading from '../extra comp/Loading';\r\nimport useFetchToken from \"../../usequery/useFetchToken.js\";\r\nimport { AuthContext } from \"../profiles/login/LoginFetch\"\r\nimport jwt_decode from \"jwt-decode\"\r\n\r\n\r\n\r\n\r\nfunction YourOrders() {\r\n    // const method='GET'\r\n    // let url= `${process.env.REACT_APP_URLS}/profile/details/${id}`\r\n    // const {data}= useAuthFetch(url, method) \r\n    // \r\n    // const[data, setData]= useState()\r\n    // const [loading, setLoading] = useState(true);\r\n    // const token= JSON.parse(window.localStorage.getItem(\"authToken\"))|| null\r\n    const {user}= useContext(AuthContext)\r\n    let userDetail\r\n    if(user){\r\n      userDetail= jwt_decode(user.access)  \r\n    }\r\n    \r\n    let url= `${process.env.REACT_APP_URLS}/profile/yourorders/${userDetail.username}`\r\n    let method = \"GET\"\r\n    const {data, loading, error}= useFetchToken(url, method)\r\n    \r\n    \r\n\r\n    const columns = [\r\n        { field: \"id\", headerName: \"ID\", hide: \"true\" },\r\n        {\r\n          field: \"category\",\r\n          headerName: \"Category\",\r\n          hide: \"true\",\r\n          flex: 1,\r\n          headerAlign: \"left\",\r\n        },\r\n        {\r\n          field: \"image\",\r\n          headerName: \"Image\",\r\n          filterable: false,\r\n          renderCell: (params) => {\r\n            // ;\r\n            return <Avatar src={params.row.image} />;\r\n          },\r\n        },\r\n        { field: \"sellers\", headerName: \"Sellers\", flex: 1 },\r\n        { field: \"description\", headerName: \"Description\", flex: 1, hide: \"true\" },\r\n        {\r\n          field: \"price\",\r\n          headerName: \"Price\",\r\n          type: \"number\",\r\n          headerAlign: \"left\",\r\n          align: \"left\",\r\n        },\r\n        {\r\n          field: \"size\",\r\n          headerName: \"Size\",\r\n          type: \"number\",\r\n          headerAlign: \"left\",\r\n          align: \"left\",\r\n          hide: \"true\",\r\n        },\r\n      ];\r\n\r\n      useEffect(()=>{document.title=\"Orders\"\r\n    },[])\r\n  return (\r\n    <>\r\n      {!loading?\r\n      <>\r\n      {error && <h1 style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\", padding:\" 22% 0\", color: \"cyan\",}}>\r\n        {error}\r\n      </h1> }\r\n    {data &&<div style={{ height: \"100%\", width: \"100%\" }}>\r\n       (\r\n        <Box m=\"35px 0 0 0\" height=\"40vh\">\r\n          <DataGrid\r\n            rows={data}\r\n            columns={columns}\r\n            pageSize={7}\r\n            rowsPerPageOptions={[7]}\r\n            checkboxSelection\r\n            disableSelectionOnClick={true}\r\n          />\r\n        </Box>\r\n      )\r\n    </div>}</>: <Loading />}\r\n  </>\r\n  )\r\n}\r\n\r\nexport default memo(YourOrders)"],"names":["url","method","data","setData","useState","error","setError","loading","setLoading","token","JSON","parse","window","localStorage","getItem","useEffect","errorStatus","fetch","headers","access","then","response","ok","status","Error","json","msg","catch","err","message","YourOrders","user","useContext","AuthContext","userDetail","jwt_decode","process","username","useFetchToken","columns","field","headerName","hide","flex","headerAlign","filterable","renderCell","params","Avatar","src","row","image","type","align","document","title","Loading","style","display","justifyContent","alignItems","padding","color","height","width","Box","m","DataGrid","rows","pageSize","rowsPerPageOptions","checkboxSelection","disableSelectionOnClick","memo"],"sourceRoot":""}